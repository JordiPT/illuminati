h1. Illuminati

h2. Automated Illumina Pipeline

<pre>
                     
                                                               `-.`'.-'
                                                            `-.        .-'.
                                                         `-.    -./\.-    .-'
                                                             -.  /_|\  .-
                                                         `-.   `/____\'   .-'.
                                                      `-.    -./.-""-.\.-      '
                                                         `-.  /< (()) >\  .-'
                                                       -   .`/__`-..-'__\'   .-
                                                     ,...`-./___|____|___\.-'.,.
                                                        ,-'   ,` . . ',   `-,
                                                     ,-'                     `-,
</pre>
h3. About

Illuminati is a set of tools geared towards automating portions of Illumina's secondary analysis pipeline. This application is custom tailored for a specific research institution and not architectured for general use. This may change in the future, and others dealing with Illumina software could still find it interesting.

Note: we will refer to this pipeline as the 'primary' analysis pipeline, even though Illumina documentation refers to it as the 'secondary' analysis pipeline.

h3. What it does

General overview of the execution of the analysis pipeline this tool performs:

* Create configuration files
** SampleSheet.csv and config.txt are created using data from custom LIMS system
* Convert raw unaligned reads to Fastq format
* Demultiplex indexed lanes
* Perform alignment to reference genome
* Aggregate and rename unaligned reads
* Remove reads that do not pass filter
* Analyze unaligned reads using fastqc
* Aggregate and rename export files
* Distribute data to project directories
* Distribute stats and quality control analysis to qcdata directory

h3. Requirements

* *CASAVA 1.8.0* - this tool is primarily a wrapper around the CASAVA pipeline software help automate it. This tool is designed to deal specifically with CASAVA 1.8, and would fail completely with an older version. CASAVA binaries should be located at @CASAVA_PATH@ (see @lib/illuminati/constants.rb@).
* *fastqc* - we need fastqc available from the command line. Tested with fastqc version *0.9.2*.
* *ngsquery.pl* - the most troublesome external dependency. ngsquery.pl should sit in the @SCRIPT_PATH@ directory. It is a perl script that connects to our LIMS system and provides flowcell and distribution information back to Illuminati. Future work will be to eliminate or reduce this external dependency. 
* *fastqc.pl* - another external perl script. This one automates the running of fastqc and a bit of post processing to make convenient, easy to read, centralized output. Future work includes rewriting this script in ruby for fun and including it in Illuminati.
* *Custom Directory Structure* - Take a look at @lib/illuminati/constants.rb@ to get a feel for the expected directory structure. Modifying this file as well as @assests/config.txt.erb@ should allow for your own directory structure, but no promises. Future work includes moving these paths to a configuration file.

h3. Using Illuminati

To use Illuminati, you need a few things in place:
* Flowcell data is in LIMS system and data provided by @ngsquery.pl@ is correct.
* If the Flowcell is multiplexed, a @SampleMultiplex.csv@ file is present in the flowcells base directory (see below for more on @SampleMultiplex.csv@.

Once things are in order, running Illuminati should be a three step process:

h5. Step 1: Run startup.rb

Run the @bin/startup.rb@ script passing in the flowcell id:

<pre>
$ cd /qcdata/illuminati
$ ./bin/startup 639AXXPY
</pre>

This should generate an Admin script in @/qcdata/Admin@. This admin script is named @<flowcell_id>.sh@ and is meant to be executed to start off the main Illuminati process. So for example, this admin script would be named @639AXXPY.sh@.

h5. Step 2: Review Admin Script

Have a look at the admin script to make sure things look good

<pre>
$ cd /qcdata/Admin
less 639AXXPY.sh
</pre>

First, you should see output from the LIMS system about the data of each of the flowcell's lanes. This is the data that will be used to create the @SampleSheet.csv@ and @config.txt@, so its important that its right. 

Then comes the @SampleSheet.csv@ output. If a @SampleMultiplex.csv@ is found for the flowcell, the data in this file is used to build up the barcodes and sample names for the flowcell (@SampleMultiplex.csv@ is required as our LIMS system doesn't currently support barcoded lanes). If no @SampleMultiplex.csv@ is found, a warning is generated and the @SampleSheet.csv@ is generated as if none of the lanes are multiplexed. This is fine, as long as it is actually the truth.

Next, you will see the output that will go into the @config.txt@ file. Check this over and ensure the output doesn't include errors about missing genomes or otehr information.

If there is a @SampleMultiplex.csv@ and it contains custom barcode info, then @custom_barcode.txt@ files will be made for the lanes that need them. If not, then messages will be produced indicating that no custom barcodes were found for the flowcell.

Finally, the admin script contains the shell commands that will kick off CASAVA with the files to be generated. You can see that there is a  @POST_RUN_COMMAND@ in the make command that will automate the next step, alignment. However, if everything goes as planned (like it always does), then you won't really need to deal with anything but this file.

h5. Step 3: Run Admin Script

If the admin script looks good, and you are ready to roll, then go!

<pre>
$ ./639AXXPY.sh
</pre>

This will actually create the @config.txt@ and @SampleSheet.csv@ files with the output as described in the admin script, then startup CASAVA's BCL Converter.
