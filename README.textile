h1. Illuminati

h2. Automated Illumina Pipeline

<pre>
                  
                                                            `-.`'.-'
                                                         `-.        .-'.
                                                      `-.    -./\.-    .-'
                                                          -.  /_|\  .-
                                                      `-.   `/____\'   .-'.
                                                   `-.    -./.-""-.\.-      '
                                                      `-.  /< (()) >\  .-'
                                                    -   .`/__`-..-'__\'   .-
                                                  ,...`-./___|____|___\.-'.,.
                                                     ,-'   ,` . . ',   `-,
                                                  ,-'                     `-,
</pre>
h2. About

Illuminati is a set of tools geared towards automating portions of Illumina's secondary analysis pipeline. This application is custom tailored for a specific research institution and not architectured for general use. This may change in the future, and others dealing with Illumina software could still find it interesting.

Note: we will refer to this pipeline as the 'primary' analysis pipeline, even though Illumina documentation refers to it as the 'secondary' analysis pipeline.

h2. What it does

General overview of the execution of the analysis pipeline this tool performs:

* Create configuration files
** SampleSheet.csv and config.txt are created using data from custom LIMS system
* Convert raw unaligned reads to Fastq format
* Demultiplex indexed lanes
* Perform alignment to reference genome
* Aggregate and rename unaligned reads
* Remove reads that do not pass filter
* Split custom barcoded lanes
* Analyze unaligned reads using fastqc
* Aggregate and rename export files
* Create Sample_Report for name / lane / sample mapping
* Distribute data to project directories
* Distribute stats and quality control analysis to qcdata directory

h2. Requirements

* *CASAVA 1.8.0* - this tool is primarily a wrapper around the CASAVA pipeline software help automate it. This tool is designed to deal specifically with CASAVA 1.8, and would fail completely with an older version. CASAVA binaries should be located at @CASAVA_PATH@ (see @lib/illuminati/constants.rb@).
* *fastqc* - we need fastqc available from the command line. Tested with fastqc version *0.9.2*.
* *fastx_barcode_splitter.pl* - needs to be availible from command line
* *ngsquery.pl* - the most troublesome external dependency. ngsquery.pl should sit in the @SCRIPT_PATH@ directory. It is a perl script that connects to our LIMS system and provides flowcell and distribution information back to Illuminati. Future work will be to eliminate or reduce this external dependency. 
* *fastqc.pl* - another external perl script. This one automates the running of fastqc and a bit of post processing to make convenient, easy to read, centralized output. Future work includes rewriting this script in ruby for fun and including it in Illuminati.
* *Custom Directory Structure* - Take a look at @lib/illuminati/constants.rb@ to get a feel for the expected directory structure. Modifying this file as well as @assests/config.txt.erb@ should allow for your own directory structure, but no promises. Future work includes moving these paths to a configuration file.

h2. Using Illuminati

To use Illuminati, you need a few things in place:
* Flowcell data is in LIMS system and data provided by @ngsquery.pl@ is correct.
* If the Flowcell is multiplexed, a @SampleMultiplex.csv@ file is present in the flowcells base directory (see below for more on @SampleMultiplex.csv@.

Once things are in order, running Illuminati should be a three step process:

h4. Step 1: Run startup.rb

Run the @bin/startup.rb@ script passing in the flowcell id:

<pre>
$ cd /solexa/bin/illuminati
$ ./bin/startup 639AXXPY
</pre>

This should generate an Admin script in @/solexa/runs/@. This admin script is named @<flowcell_id>.sh@ and is meant to be executed to start off the main Illuminati process. So for example, this admin script would be named @639AXXPY.sh@.

h4. Step 2: Review Admin Script

Have a look at the admin script to make sure things look good

<pre>
$ cd /solexa/runs
less 639AXXPY.sh
</pre>

First, you should see output from the LIMS system about the data of each of the flowcell's lanes. This is the data that will be used to create the @SampleSheet.csv@ and @config.txt@, so its important that its right. 

Then comes the @SampleSheet.csv@ output. If a @SampleMultiplex.csv@ is found for the flowcell, the data in this file is used to build up the barcodes and sample names for the flowcell (@SampleMultiplex.csv@ is required as our LIMS system doesn't currently support barcoded lanes). If no @SampleMultiplex.csv@ is found, a warning is generated and the @SampleSheet.csv@ is generated as if none of the lanes are multiplexed. This is fine, as long as it is actually the truth.

Next, you will see the output that will go into the @config.txt@ file. Check this over and ensure the output doesn't include errors about missing genomes or otehr information.

If there is a @SampleMultiplex.csv@ and it contains custom barcode info, then @custom_barcode.txt@ files will be made for the lanes that need them. If not, then messages will be produced indicating that no custom barcodes were found for the flowcell.

Finally, the admin script contains the shell commands that will kick off CASAVA with the files to be generated. You can see that there is a  @POST_RUN_COMMAND@ in the make command that will automate the next step, alignment. However, if everything goes as planned (like it always does), then you won't really need to deal with anything but this file.

h4. Step 3: Run Admin Script

If the admin script looks good, and you are ready to roll, then go!

<pre>
$ ./639AXXPY.sh
</pre>

This will actually create the @config.txt@ and @SampleSheet.csv@ files with the output as described in the admin script, then startup CASAVA's BCL Converter.

h2. What Illuminati Does Next

Ok, so the config files CASAVA needs are automatically generated and the BCL converter starts up, but what else does Illuminati do?

h4. Demultiplexing

Well, the BCL converter in CASAVA 1.8 now also automatically does the demultiplexing step as well. So, if your lanes are multiplexed, you get the demultiplexing for free!

h4. Alignment

After the BCL converter finishes, The @POST_RUN_COMMAND@ we saw in the make command kicks off the next step in the process: *alignment*. Technically, we didn't need to create the @config.txt@ file until this step, but getting it done initially makes running the alignment process pretty simple. 

The alignment portion of the CASAVA pipeline is started by the @bin/align_runner.rb@ script. Its a little wordy in there, but ultimately we are just calling 3 commands. First, CASAVA's @configureAlignment.pl@ script is run without the @--make@ flag, so it just does a test run. The output from this test run is analyzed by the @align_runner@. If there is a problem (specifically, if "ERROR" is found in the output), then Illuminati shuts down and emails you to get things going again. Usually, this means that there is a bug in the @config.txt@ file. If there isn't an error, then we run @configureAlignment.pl@ for reals, and create the @Aligned@ directory. Then we run make inside that directory to start CASAVA's ELAND aligner.

h4. Post Run

The alignment's make command contains another @POST_RUN_COMMAND@ which starts up the final part of the primary analysis pipeline: the post run. 

The post run functionality is contained in @bin/post_runner.rb@. Its an elaborate maze of fun. But hopefully the method names at least hint at what is going on. Briefly, this script does the following:
* use @cat@ to combine the multiple fastq.gz files that CASAVA makes into one for each lane / sample.
* use @zcat@ and the @bin/fastq_filter.rb@ script to filter out reads that don't pass filter.
* split lanes with custom barcodes using @fastx_barcode_splitter.pl@.
** only if lanes have been custom barcoded, and indicated as such in SampleMultiplex.csv.
* distribute fastq.gz files to their project directories.
* run fastqc on the filtered fastq.gz files and distribute the results.
* create Sample_Report.csv to summarize the sample data
* distribute the relevant stats files to the project directories.
* combine export files using @cat@ and distribute these files.
* distribute relevant qa / qc and stats files to the appropriate qcdata directory.

h4. Email & Logging

You also get emails along the way. Check out the @EMAIL_LIST@ in @lib/illuminati/constants.rb@ to see who gets emailed. 

A log file is also created for each flowcell in @/solexa/runs/log@. This will be used for future dashboard-style awesome-ness.

@align_runner.rb@ and @post_runner.rb@ also generate log files during their execution. If @post_runner.rb@ completes, it will produce a shell script with all the commands it did, so that theoretically, you could run it again if you wanted.

CASAVA's make output for the bcl conversion and align steps are captured in their own make.out files.

h2. SampleMultiplex.csv

The @SampleMultiplex.csv@ format is geared to provide Illuminati with the minimum amount of info that it can't get from LIMS, and nothing else. As such, it just contains lane, sample name, Illumina barcodes, and custom barcodes.

Currently it is generated by hand by Molecular Biology. If one is not provided, either it is a mistake, or the flowcell is assumed to not have any multiplexed lanes.

Here's an example of a @SampleMultiplex.csv@ with Illumina indexes:

<pre>
Lane,Sample Name,Illumina Index,Custom Barcode Sequence
1,dot1-wce,CAGATC,
1,dot1-IP,ACTTGA,
1,dot1fus3-wce,GATCAG,
1,dot1fus3-IP,TAGCTT,
1,dot1tda1-wce,GGCTAC,
1,dot1tda1-IP,CTTGTA,
2,dot1-wce,CAGATC,
2,dot1-IP,ACTTGA,
2,dot1fus3-wce,GATCAG,
2,dot1fus3-IP,TAGCTT,
2,dot1tda1-wce,GGCTAC,
2,dot1tda1-IP,CTTGTA,
3,WT-wce,ATCACG,
3,WT-IP,CGATGT,
3,K79A-wce,TTAGGC,
3,K79A-IP,TGACCA,
3,K79R-wce,ACAGTG,
3,K79R-IP,GCCAAT,
4,WT-wce,ATCACG,
4,WT-IP,CGATGT,
4,K79A-wce,TTAGGC,
4,K79A-IP,TGACCA,
4,K79R-wce,ACAGTG,
4,K79R-IP,GCCAAT,
5,T80A-wce,CAGATC,
5,T80A-IP,ACTTGA,
5,T80D-wce,GATCAG,
5,T80D-IP,TAGCTT,
5,T80E-wce,GGCTAC,
5,T80E-IP,CTTGTA,
6,T80A-wce,CAGATC,
6,T80A-IP,ACTTGA,
6,T80D-wce,GATCAG,
6,T80D-IP,TAGCTT,
6,T80E-wce,GGCTAC,
6,T80E-IP,CTTGTA,
7,9.5dpc_HoxB1_IP,,
8,PhiX,,
</pre>

If a @SampleMultiplex.csv@ has Illumina indexes and custom barcodes for the same lane, then it is probably a mistake (I hope they aren't trying to multiplex custom barcoded samples...).

h2. CASAVA 1.8 Directory Structure

CASAVA 1.8 has a pretty different structure for where it puts data now. Plus, the @post_runner.rb@ script creates some custom directories to do its job. Here's an overview of the directories relevant to the primary analysis pipeline:

<pre>
_ FLOWCELL_BASE_DIR
|
|___ Data
|    |
|    |___ Intensities
|
|___ Unaligned
|    |
|    |___ all
|    |
|    |___ filter
|
|___ Aligned
     |
     |___ all
</pre>

The *big* change is that you don't go digging in @Data/Intensities/GERALD_*@ directories anymore for your sequence / alignment files.

Instead, there are two separate directories right off the flowcell's base directory called @Unaligned@ and @Aligned@ that are now used to store that data (technically they are user configurable, but these are the defaults, and thats what we'll use).

@Unaligned@ contains your fastq.gz files. Illuminati adds two additional sub-directories - @all@ and @filter@. @all@ contains the concatenated, unfiltered fastq.gz files with the correct naming structure. @filter@ contains the same files, but with the reads that didn't pass filter removed. 

@Aligned@ as you might guess contains the export.txt.gz files. Illuminati again adds the @all@ directory to store files using the naming convention we want to use.

h2. Testing Illuminati

Some effort has been put in to writing tests to ensure components of Illuminati are functional and don't break when new features are added. These tests are currently incomplete, but it is a decent start. If you are on the particular machine this software was meant to be run on, you can simply run autotest to check all tests:

<pre>
$ cd /solexa/bin/illuminati
$ autotest
</pre>

Everything should pass, or something is broken. If you are on another machine, some of the tests can be run using rspec. Some tests will fail due to requirements of file structure and database access. Future work includes making it configurable enough to test on other machines.
